# Begin Test 0

  time steps = 256
  iterations           = 7
  number of levels     = 7

# Begin Test 1

  time steps = 256
  iterations           = 6
  number of levels     = 7

# Begin Test 2

  time steps = 256
  iterations           = 7
  number of levels     = 7

# Begin Test 3

  time steps = 256
  iterations           = 4
  number of levels     = 7

# Begin Test 4

  time steps = 256
  iterations           = 9
  number of levels     = 7

# Begin Test 5

  time steps = 256
  iterations           = 8
  number of levels     = 7

# Begin Test 6

  time steps = 128
  iterations           = 7
  number of levels     = 6

# Begin Test 7

  time steps = 32
  iterations           = 6
  number of levels     = 4

# Begin Test 8

  time steps = 32
  iterations            = 6
  number of levels      = 4

# Begin Test 9

  time steps = 32
  iterations            = 6
  number of levels      = 4

# Begin Test 10


# Begin Test 11


# Begin Test 12

  time steps = 32
  iterations           = 6
  number of levels     = 4

# Begin Test 13

  time steps = 9
  iterations           = 4
  number of levels     = 2


# Begin Test 14

  time steps = 32
  iterations           = 6
  number of levels     = 4

# Begin Test 15

Starting braid_TestInitAccess
   braid_TestInitAccess:   Starting Test 1
   braid_TestInitAccess:   u = init(t=0.00e+00)
   braid_TestInitAccess:   free(u) 
Finished braid_TestInitAccess
Starting braid_TestInitAccess
   braid_TestInitAccess:   Starting Test 1
   braid_TestInitAccess:   u = init(t=9.82e-02)
   braid_TestInitAccess:   free(u) 
Finished braid_TestInitAccess
Starting braid_TestClone
   braid_TestClone:   Starting Test 1
   braid_TestClone:   u = init(t=0.00e+00)
   braid_TestClone:   v = clone(u)
   braid_TestClone:   free(u)
   braid_TestClone:   free(v)
Finished braid_TestClone
Starting braid_TestClone
   braid_TestClone:   Starting Test 1
   braid_TestClone:   u = init(t=9.82e-02)
   braid_TestClone:   v = clone(u)
   braid_TestClone:   free(u)
   braid_TestClone:   free(v)
Finished braid_TestClone
Starting braid_TestSum
   braid_TestSum:   Starting Test 1
   braid_TestSum:   u = init(t=0.00e+00)
   braid_TestSum:   v = clone(u)
   braid_TestSum:   v = u - v
   braid_TestSum:   Starting Test 2
   braid_TestSum:   v = 2*u + v
   braid_TestSum:   check output:  v should equal 2*u 
   braid_TestSum:   free(u)
   braid_TestSum:   free(v)
Finished braid_TestSum
Starting braid_TestSum
   braid_TestSum:   Starting Test 1
   braid_TestSum:   u = init(t=9.82e-02)
   braid_TestSum:   v = clone(u)
   braid_TestSum:   v = u - v
   braid_TestSum:   Starting Test 2
   braid_TestSum:   v = 2*u + v
   braid_TestSum:   check output:  v should equal 2*u 
   braid_TestSum:   free(u)
   braid_TestSum:   free(v)
Finished braid_TestSum
Starting braid_TestSpatialNorm
   braid_TestSpatialNorm:   Starting Test 1
   braid_TestSpatialNorm:   u = init(t=0.00e+00)
   braid_TestSpatialNorm:   spatialnorm(u) 
   braid_TestSpatialNorm:   v = clone(u)
   braid_TestSpatialNorm:   v = u - v 
   braid_TestSpatialNorm:   spatialnorm(v) 
   braid_TestSpatialNorm:   Test 1 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestSpatialNorm:   expected output:  spatialnorm(v) = 0.0 
   braid_TestSpatialNorm:   Starting Test 2
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = u + w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 2 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 8.00e+00 / 4.00e+00 = 2.00e+00 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 2.0 
   braid_TestSpatialNorm:   Starting Test 3
   braid_TestSpatialNorm:   free(w)
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = 0.0*u + 0.5*w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 3 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 2.00e+00 / 4.00e+00 = 5.00e-01 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 0.5 
   braid_TestSpatialNorm:   free(u)
   braid_TestSpatialNorm:   free(v)
   braid_TestSpatialNorm:   free(w)
Finished braid_TestSpatialNorm: all tests passed successfully
Starting braid_TestSpatialNorm
   braid_TestSpatialNorm:   Starting Test 1
   braid_TestSpatialNorm:   u = init(t=9.82e-02)
   braid_TestSpatialNorm:   spatialnorm(u) 
   braid_TestSpatialNorm:   v = clone(u)
   braid_TestSpatialNorm:   v = u - v 
   braid_TestSpatialNorm:   spatialnorm(v) 
   braid_TestSpatialNorm:   Test 1 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestSpatialNorm:   expected output:  spatialnorm(v) = 0.0 
   braid_TestSpatialNorm:   Starting Test 2
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = u + w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 2 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 6.75e+00 / 3.37e+00 = 2.00e+00 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 2.0 
   braid_TestSpatialNorm:   Starting Test 3
   braid_TestSpatialNorm:   free(w)
   braid_TestSpatialNorm:   w = clone(u)
   braid_TestSpatialNorm:   w = 0.0*u + 0.5*w 
   braid_TestSpatialNorm:   spatialnorm(u)
   braid_TestSpatialNorm:   spatialnorm(w)
   braid_TestSpatialNorm:   Test 3 Passed
   braid_TestSpatialNorm:   actual output:    spatialnorm(w) / spatialnorm(u) = 1.69e+00 / 3.37e+00 = 5.00e-01 
   braid_TestSpatialNorm:   expected output:  spatialnorm(w) / spatialnorm(u) = 0.5 
   braid_TestSpatialNorm:   free(u)
   braid_TestSpatialNorm:   free(v)
   braid_TestSpatialNorm:   free(w)
Finished braid_TestSpatialNorm: all tests passed successfully
Starting braid_TestBuf
   braid_TestBuf:   Starting Test 1
   braid_TestBuf:   u = init(t=0.00e+00)
   braid_TestBuf:   spatialnorm(u) 
   braid_TestBuf:   size = bufsize()
   braid_TestBuf:   buffer = malloc(size)
   braid_TestBuf:   buffer = bufpack(u, buffer))
   braid_TestBuf:   v = bufunpack(buffer)
   braid_TestBuf:   v = u - v 
   braid_TestBuf:   spatialnorm(v) 
   braid_TestBuf:   Test 1 Passed
   braid_TestBuf:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestBuf:   expected output:  spatialnorm(v) = 0.0 
   braid_TestBuf:   free(u)
   braid_TestBuf:   free(v)
Finished braid_TestBuf: all tests passed successfully
Starting braid_TestBuf
   braid_TestBuf:   Starting Test 1
   braid_TestBuf:   u = init(t=9.82e-02)
   braid_TestBuf:   spatialnorm(u) 
   braid_TestBuf:   size = bufsize()
   braid_TestBuf:   buffer = malloc(size)
   braid_TestBuf:   buffer = bufpack(u, buffer))
   braid_TestBuf:   v = bufunpack(buffer)
   braid_TestBuf:   v = u - v 
   braid_TestBuf:   spatialnorm(v) 
   braid_TestBuf:   Test 1 Passed
   braid_TestBuf:   actual output:    spatialnorm(v) = 0.00e+00  
   braid_TestBuf:   expected output:  spatialnorm(v) = 0.0 
   braid_TestBuf:   free(u)
   braid_TestBuf:   free(v)
Finished braid_TestBuf: all tests passed successfully
Starting braid_TestCoarsenRefine
   braid_TestCoarsenRefine:   Starting Test 1
   braid_TestCoarsenRefine:   u = init(t=0.00e+00)
   braid_TestCoarsenRefine:   spatialnorm(u) 
   braid_TestCoarsenRefine:   uc = coarsen(u)
   braid_TestCoarsenRefine:   actual output:   wrote u and spatially coarsened u 
   braid_TestCoarsenRefine:   Starting Test 2
   braid_TestCoarsenRefine:   v = clone(u)
   braid_TestCoarsenRefine:   vc = coarsen(v)
   braid_TestCoarsenRefine:   wc = clone(vc)
   braid_TestCoarsenRefine:   wc = uc - wc 
   braid_TestCoarsenRefine:   spatialnorm(wc)
   braid_TestCoarsenRefine:   Test 2 Passed
   braid_TestCoarsenRefine:   actual output:    spatialnorm(wc) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  spatialnorm(wc) = 0.0 
   braid_TestCoarsenRefine:   Starting Test 3
   braid_TestCoarsenRefine:   w = clone(u)
   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   v = refine(vc)
   braid_TestCoarsenRefine:   u = refine(uc)
   braid_TestCoarsenRefine:   v = u - v 
   braid_TestCoarsenRefine:   spatialnorm(v)
   braid_TestCoarsenRefine:   Test 3 Passed
   braid_TestCoarsenRefine:   actual output:    spatialnorm(v) = 0.00e+00 
   braid_TestCoarsenRefine:   expected output:  spatialnorm(v) = 0.0 
   braid_TestCoarsenRefine:   Starting Test 4
   braid_TestCoarsenRefine:   w = w - u 
   braid_TestCoarsenRefine:   spatialnorm(w)
   braid_TestCoarsenRefine:   actual output:    spatialnorm(w) = 2.15e-02 
   braid_TestCoarsenRefine:   expected output:  For simple interpolation formulas
   braid_TestCoarsenRefine:   free(u)
   braid_TestCoarsenRefine:   free(v)
   braid_TestCoarsenRefine:   free(w)
   braid_TestCoarsenRefine:   free(uc)
   braid_TestCoarsenRefine:   free(vc)
   braid_TestCoarsenRefine:   free(wc)
Finished braid_TestCoarsenRefine: all tests passed successfully
Starting braid_TestResidual
   braid_TestResidual:   Starting Test 1
   braid_TestResidual:   u = init(t=0.00e+00)
   braid_TestResidual:   spatialnorm(u) 
   braid_TestResidual:   unext = clone(u)
   braid_TestResidual:   ustop = clone(u)
   braid_TestResidual:   fstop = clone(u)
   braid_TestResidual:   fstop = ustop + fstop 
   braid_TestResidual:   unext = step(ustop, fstop, unext) 
   braid_TestResidual:   ustop = clone(u)
   braid_TestResidual:   fstop = clone(u)
   braid_TestResidual:   fstop = ustop + fstop 
   braid_TestResidual:   r = residual(unext, u) 
   braid_TestResidual:   r = fstop - r 
   braid_TestResidual:   spatialnorm(r)
   braid_TestResidual:   actual output:    spatialnorm(r) approx. 1.0e-14 
   braid_TestResidual:   expected output:  spatialnorm(r) approx. 0.0 
   braid_TestResidual:   free(u)
   braid_TestResidual:   free(unext)
   braid_TestResidual:   free(ustop)
   braid_TestResidual:   free(fstop)
Finished braid_TestResidual 
Finished braid_TestAll: no fails detected, however some results must be

# Begin Test 16

  time steps = 128
  iterations           = 1
  number of levels     = 1

# Begin Test 17
  
  time steps = 128
  iterations           = 6
  number of levels     = 2


# Begin Test 18

  time steps = 128
  iterations           = 6
  number of levels     = 8

# Begin Test 19
 
  time steps = 128
  iterations           = 6
  number of levels     = 2
